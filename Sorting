#include<iostream>
using namespace std;

#define print(i, n) for(i=0; i<n; i++)

void swap(int* a, int* b)
{
	int t = *a;
	*a = *b;
	*b = t;
}

void InsertionSort(int a[], int n)
{
	int i, key, j;
	for (i = 1; i < n; i++)
	{
		key = a[i];
		j = i - 1;

		while (j >= 0 && a[j] > key)
		{
			a[j + 1] = a[j];
			j = j - 1;
		}
		a[j + 1] = key;
	}
}

void newInsertSort(int a[], int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		int j = i + 1; // next index
		while (j > 0 && (a[j] < a[j - 1])) // backware check, j-1 is prev element
		{
			//swap
			int temp = a[j];
			a[j] = a[j - 1];
			a[j - 1] = temp;

			j--; // go back to check with prev element.
		}
	}
}

void RaviMethod(int a[], int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		int next = i + 1;
		int prev = next - 1;
		while (next >= 0 && (a[prev] > a[next]))
		{
			int temp = a[next];
			a[next] = a[prev];
			a[prev] = temp;
			prev;
		}
	}
}

void Merge(int *a, int s, int mid, int e)
{
	mid = (s + e) / 2;
	int i = s; //pointing to fist sub array 
	int j = mid + 1; // pointing to second sub array
	int k = s; // pointing to temp array(to join)

	int temp[100];
	while (i <= mid && j <= e)
	{
		if (a[i] < a[j])
		{
			temp[k++] = a[i++];
		}
		else
		{
			temp[k++] = a[j++];
		}
	}
	//left out elements are copied from first subarray
	while (i <= mid)
	{
		temp[k++] = a[i++];
	}
	//left out elements are copied from second subarray
	while (j <= e)
	{
		temp[k++] = a[j++];
	}
	//copy all to main array.
	for (int i = s; i <= e; i++)
	{
		a[i] = temp[i];
	}
}
void MergeSort(int a[], int s, int e)
{
	int mid;
	if (s < e)
	{
		mid = (s + e) / 2;

		MergeSort(a, s, mid);
		MergeSort(a, mid + 1, e);
		Merge(a, s, mid, e);
	}
}

int partition(int *a, int s, int e)
{
	int i = s - 1;
	int j = s;
	int pivot = a[e];
	for (; j < e; j++)
	{
		if (a[j] <= pivot)
		{
			i++;
			swap(a[i], a[j]);
		}
	}
	swap(a[i + 1], a[e]);
	return i + 1;
}

void quicksort(int *a, int s, int e)
{
	if (s >= e)
		return;

	int p = partition(a, s, e);
	quicksort(a, s, p - 1);
	quicksort(a, p + 1, e);
}

void countSort(int array[], int size)
{
	// The size of count must be at least the (max+1) but
	// we cannot assign declare it as int count(max+1) in C++ as
	// it does not support dynamic memory allocation.
	// So, its size is provided statically.
	int output[1000];
	int count[1000];
	int max = array[0];
	for (int i = 1; i < size; i++)
	{
		if (array[i] > max)
			max = array[i];
	}

	for (int i = 0; i <= max; ++i)
	{
		count[i] = 0;
	}

	for (int i = 0; i < size; i++)
	{
		count[array[i]]++;
	}
	for (int i = 1; i <= max; i++)
	{
		count[i] += count[i - 1];
	}
	for (int i = size - 1; i >= 0; i--)
	{
		output[count[array[i]] - 1] = array[i];
		count[array[i]]--;
	}
	for (int i = 0; i < size; i++)
	{
		array[i] = output[i];
	}
}

void CountingSort2(int arr[], int n, int max)
{
	int count[1000] = { 0 }, i, j;

	for (i = 0; i < n; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
	}

	for (i = 0; i < n; i++)
	{
		count[arr[i]] = count[arr[i]] + 1;
	}

	for (i = 0; i <= max; i++)
	{
		for (j = 1; j <= count[i]; ++j)
		{
			cout << i << " ";
		}
	}
}

void printArray(int arr[], int size)
{
	for (int i = 0; i < size; i++)
		cout << arr[i] << " ";
	cout << endl;
}

void BubbleSort(int a[], int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = 0; j < n - i - 1; j++)
		{
			if (a[j] > a[j + 1])
			{
				swap(a[j], a[j + 1]);
			}
		}
	}
}

void SelectionSort(int a[], int n)
{
	int min_inx;
	for (int i = 0; i < n - 1; i++)
	{
		min_inx = i;
		for (int j = i + 1; j < n; j++)
		{
			if (a[j] < a[min_inx])
				min_inx = j;
			swap(a[i], a[min_inx]);
		}
		//swap(a[min_inx], a[i]);
	}
}

void insertionSort(int arr[], int n)
{
	int i, key, j;
	for (i = 1; i < n; i++)
	{
		key = arr[i];
		j = i - 1;

		/* Move elements of arr[0..i-1], that are
		greater than key, to one position ahead
		of their current position */
		while (j >= 0 && arr[j] > key)
		{
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = key;
	}
}

int shellSort(int arr[], int n)
{
	// Start with a big gap, then reduce the gap 
	for (int gap = n / 2; gap > 0; gap /= 2)
	{
		// Do a gapped insertion sort for this gap size. 
		// The first gap elements a[0..gap-1] are already in gapped order 
		// keep adding one more element until the entire array is 
		// gap sorted  
		for (int i = gap; i < n; i += 1)
		{
			// add a[i] to the elements that have been gap sorted 
			// save a[i] in temp and make a hole at position i 
			int temp = arr[i];

			// shift earlier gap-sorted elements up until the correct  
			// location for a[i] is found 
			int j;
			for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)
				arr[j] = arr[j - gap];

			//  put temp (the original a[i]) in its correct location 
			arr[j] = temp;
		}
	}
	return 0;
}

int main()
{
	int a[] = { 238,4, -2,7,12,5,1,97,3 };
	int n = sizeof(a) / sizeof(int);

	BubbleSort(a, n);
	cout << "01.Bubble sort : ";
	printArray(a, n);

	SelectionSort(a, n);
	cout << "02.Selection sort : ";
	printArray(a, n);

	InsertionSort(a, n);
	cout << "03.Insertion sort : ";
	printArray(a, n);

	newInsertSort(a, n);
	cout << "3.1 : New insertion sort :";
	printArray(a, n);

	RaviMethod(a, n);
	cout << "3.2 : my method - insertion sort :";
	printArray(a, n);

	MergeSort(a, 0, n - 1);
	cout << "4.0 : Merge sort :";
	printArray(a, n);

	quicksort(a, 0, n - 1);
	cout << "5.0 : Quick sort :";
	printArray(a, n);

	shellSort(a, n);
	cout << "6.0 : shell sort  : ";
	printArray(a, n);

	int array[] = { 238,4,7,12,5,1,97,3 };
	int n1 = sizeof(array) / sizeof(array[0]);
	cout << "COUNT SORT DOESNT WORK FOR NEGATIVE NUMBERS\n7.0 - count sort    : ";
	countSort(array, n1);
	printArray(array, n1);

	int max = 0;
	cout << "7.1 : count sort 2  : ";
	CountingSort2(array, n1, max);

	getchar();
	return(0);
}
